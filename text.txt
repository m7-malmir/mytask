//readme
//
run for storeprocidure
exec [ZJM].[AAP_FindParentRole] @Role_ID=485
//

ButtonControl1
ButtonControl2


tblLoanCredits
txtFullName
btnSubmit




var tblLoanList = null;

$(document).ready(function () {  // مطمئن می‌شویم که کد بعد از بارگذاری کامل DOM اجرا می‌شود
    tblLoanList = (function () {
        var element = null,
            isDirty = false,
            rowPrimaryKeyName = "Id",
            readRows = FormManager.readEntity,
            editFormRegKey = "",
            insertFormRegKey = "";

        init();

        function init() {
            element = $("#tblLoanList");
            build();
            bindEvents();
        }

        function build() {
            // متد ساخت اضافه‌ای اگر نیاز بود
        }

        function addRow(rowInfo, rowNumber) {
            var index = 0;
            var tempRow = element.find("tr.row-template").clone();
            tempRow.show().removeClass("row-template").addClass("row-data");
            tempRow.data("rowInfo", rowInfo);

            var CHbox = $("<input type='checkbox' value='" + rowInfo.Id + "'>").addClass('CHbox');
            tempRow.find("td:eq(" + index++ + ")").append(CHbox);

            element.find("tr.row-template").before(tempRow);
        }

        function bindEvents() {
            // چک‌باکس‌ها
            element.on("click", ".CHbox", function () {
                var clicked = $(this);
                if (clicked.is(':checked')) {
                    // سایر چک‌باکس‌ها را غیر فعال می‌کنیم
                    $('.CHbox:checked').not(clicked).each(function () {
                        $(this).prop('checked', false).trigger('change');
                    });

                    var row = clicked.closest("tr");
                    var r_info = row.data("rowInfo");

                    $("#txtServiceId").val(r_info.OwnerPersonnelName);
                    carId = r_info.Id;
                    NewOwnerName = r_info.OwnerPersonnelName;
                }
            });

            // حذف ردیف
            element.on("click", "img.delete", function () {
                var that = $(this),
                    row = that.closest("tr");

                $.qConfirm(that, "آیا مطمئن هستید؟", function (btn) {
                    if (btn.toUpperCase() == "OK") {
                        removeRow(row);
                    }
                });
            });

            // ویرایش ردیف
            element.on("click", "img.edit", function () {
                editRow($(this).closest("tr"));
            });

            // افزودن ردیف جدید
            element.on("click", "img.add", function () {
                showAddDialog();
            });
        }

        function addNewRow(rowInfo) {
            addRow(rowInfo, element.find("tr.row-data").filter(":visible").length + 1);
            isDirty = true;
        }

        function showAddDialog() {
            var params = {}; // تغییر params در صورت نیاز

            $.showModalForm({ registerKey: insertFormRegKey, params: params },
                function (retVal) {
                    if (retVal.OK) {
                        refresh();
                        addNewRow(retVal.Data);
                    }
                }
            );
        }

        function editRow(row) {
            var rowInfo = row.data("rowInfo"),
                params = {};

            params[rowPrimaryKeyName] = rowInfo[rowPrimaryKeyName]; // تغییر params در صورت نیاز

            $.showModalForm({ registerKey: editFormRegKey, params: params },
                function (retVal) {
                    if (retVal.OK) {
                        refresh();
                        changeRow(row, retVal.Data);
                    }
                }
            );
        }

        function changeRow(row, newRowInfo) {
            var index = 1;
            row.find("td:eq(" + index++ + ")").text(newRowInfo.Name);
            row.attr({ state: "changed" });
            row.data("rowInfo", newRowInfo);
            isDirty = true;
        }

        function removeRow(row) {
            if (row.attr("state") == "new") {
                row.remove();
                rearrangeRows();
            } else {
                row.attr({ state: "deleted" });
                row.hide();
                rearrangeRows();
            }
            isDirty = true;
        }

        function load(list) {
            for (var i = 0, l = list.length; i < l; i++) {
                addRow(list[i], i + 1);
            }
            hideLoading();
            myHideLoading();
        }

        function saveData(callback) {
            if (!isDirty) {
                if ($.isFunction(callback)) {
                    callback();
                }
                return;
            }

            var defObjs = [$.Deferred(), $.Deferred(), $.Deferred()];
            showLoading();

            insertNewRows(function () {
                defObjs[0].resolve();
            });

            updateChangedRows(function () {
                defObjs[1].resolve();
            });

            deleteRemovedRows(function () {
                defObjs[2].resolve();
            });

            $.when(defObjs[0], defObjs[1], defObjs[2]).done(function () {
                isDirty = false;
                hideLoading();
                if ($.isFunction(callback)) {
                    callback();
                }
            });
        }

        function insertNewRows(callback) {
            if (element.find("tr.row-data[state=new]").length == 0) {
                if ($.isFunction(callback)) {
                    callback();
                }
            } else {
                var list = [];
                element.find("tr.row-data[state=new]").each(function () {
                    var tempRowInfo = JSON.parse(JSON.stringify($(this).data("rowInfo")));
                    list.push(tempRowInfo);
                });

                insertRows(list, function () {
                    if ($.isFunction(callback)) {
                        callback();
                    }
                }, function (error) {
                    alert(error);
                });
            }
        }

        function updateChangedRows(callback) {
            if (element.find("tr.row-data[state=changed]").length == 0) {
                if ($.isFunction(callback)) {
                    callback();
                }
            } else {
                var list = [];
                element.find("tr.row-data[state=changed]").each(function () {
                    var tempRowInfo = JSON.parse(JSON.stringify($(this).data("rowInfo")));
                    tempRowInfo.Where = rowPrimaryKeyName + " = " + tempRowInfo[rowPrimaryKeyName];
                    delete tempRowInfo[rowPrimaryKeyName];
                    list.push(tempRowInfo);
                });

                updateRows(list, function () {
                    if ($.isFunction(callback)) {
                        callback();
                    }
                }, function (error) {
                    alert(error);
                });
            }
        }

        function deleteRemovedRows(callback) {
            if (element.find("tr.row-data[state=deleted]").length == 0) {
                if ($.isFunction(callback)) {
                    callback();
                }
            } else {
                var list = [];
                element.find("tr.row-data[state=deleted]").each(function () {
                    var tempRowInfo = JSON.parse(JSON.stringify($(this).data("rowInfo")));
                    list.push({ Where: rowPrimaryKeyName + " = " + tempRowInfo[rowPrimaryKeyName] });
                });

                deleteRows(list, function () {
                    if ($.isFunction(callback)) {
                        callback();
                    }
                }, function (error) {
                    alert(error);
                });
            }
        }

        function rearrangeRows() {
            element.find("tr.row-data").filter(":visible").each(function (index) {
                $(this).find("td:eq(0)").text(index + 1);
            });
        }

        function refresh(list) {
            element.find("tr.row-data").remove();
            load(list);
        }

        function validateData() {
            if (element.find("tr.row-data").length == 0) {
                return false;
            } else {
                return true;
            }
        }

        return {
            refresh: refresh,
            addRow: addNewRow,
            saveData: saveData,
            showAddDialog: showAddDialog,
            validateData: validateData,
            load: load
        };
    })();
});
